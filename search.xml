<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据治理可以做什么？]]></title>
    <url>%2F2019%2F02%2F12%2FInfoManage%2F</url>
    <content type="text"><![CDATA[这篇文章是我的一些想法，没有拿来实际操作过，所以有些点可能不够专业或者不怎么具有实际操作性，欢迎任何意见或者建议。这些想法的的构建基于DGI的Data Governance Framework，该框架的所有信息都可以在网站http://www.datagovernance.com找到。 首先需要区别数据于IT，数据的价值即信息，信息的价值我就不赘述了。IT好比是一个城市的所有软硬件建设，而数据就是生活在这个城市的人们。人们能否快速有效地利用城市资源以实现自身价值，这显然是需要引导和管理的，数据亦然。无论是业务部门还是IT部门，肯定都经历过一些数据问题，比如主数据混乱、重复或错误数据、数据泄露等。数据的治理是一定需要业务和IT的协作，乃至不同业务部门间的协作才能实现，原因很简单，IT不是业务数据的所有者，数据是跨部门使用的。 哪些人是相关方？ 在一个数据治理框架或项目里，如下团队或者个人应当属于相关方。影响力是指他们的决策或者行动对于数据治理的重要性，兴趣程度是指一般而言，他们对数据治理有关话题的关注程度。这里各个相关方的影响力和兴趣程度是我的个人判断，没有调研或者分析作为基础。 相关方 影响力 兴趣程度 主要关注点 可带来哪些助益 可带来哪些风险 CEO和董事会 高 中 重大事故影响公司股价和形象 决策推动数据治理框架、项目的开展 决策推延项目开展 CFO 高 中 财报真实、准确，SOX合规 批准预算 裁减预算 CIO / CISO 高 中 无重大事故或审计问题 批准IT项目和费用以支持数据治理 降低项目优先级 数据治理/保护团队 高 高 实现规划目标，无重大事故或审计问题 构建、管理数据治理有关流程，定义策略和规范；处置数据泄露事件 策略、路线定义错误；数据泄露事件处置不恰当带来负面影响 合规团队 高 高 无重大合规问题，获得合规认证 执行合规检查；补充策略和规范 合规检查不完整、不全面、不能反映真实情况 法律团队 中 中 获得必要信息支持诉讼 补充策略和规范 法规要求指引不清晰 审计团队 高 高 发现并汇报主要风险 补充策略和规范 无 公关团队 低 中 无重大公众影响事件 处置数据泄露事件 无 采购团队 中 低 降低采购成本，保持供应商的稳定性 方案、服务招标与采购 采购的要求和长耗时阻碍项目开展 企业架构（安全、应用、数据等） 高 高 规划IT架构以支持公司战略，规避风险 规划数据相关IT平台；补充策略和规范 因无整体、长远规划而导致数据保护技术落后 安全运维中心 中 高 及时监测并响应安全事故 监测并响应数据泄露风险 无法有效、及时地监测数据泄露事件 一般项目组 中 低 按时按预算交付项目 实施数据治理有关项目 项目无法实现预期的业务目标 应用开发团队 低 低 开发部署高效高质 无 漏洞、后门等安全问题引起数据泄露风险 IT运维团队 高 中 无重大IT事故；高用户满意度 维护、监控有关IT平台 IT平台可用性低，性能差 主数据维护团队 中 高 无主数据差错 管理主数据 主数据重复、错误、不完整 业务流程负责人 高 高 系统、数据可用、易用；数据分析支持业务运作 授权管理；补充策略和规范 无法定义、审核数据负责人、使用人等授权机制 个人用户 低 高 个人信息是否被滥用、泄露 无 大量用户投诉、抱怨带来负面影响 外部竞争对手、黑客等 中 高 利用系统或流程漏洞获得利益 无 窃取敏感、机密数据 所谓知己知彼才能百战不殆，分析相关方的一个重要目的是为了制定沟通策略。按照一般项目管理的相关方分析方法，可以绘制出下图。 要实现什么目标？目标如何衡量？ 1. 扩大信息价值 信息即商品：信息能够转化成可销售的产品（在合法合规的前提下） 衡量指标：销售利润 支撑交易业务：交易既可以是与客户或用户的交易，也可以是内部系统的transaction 衡量指标：交易增长率 扩展市场渠道：利用数据分析等手段增加用户量或进行精准定位 衡量指标：新用户增长率、用户-交易转化率 2. 降低成本和复杂度 减少重复率：包括master data和data records 衡量指标：重复数据率 提高完整度：意味着meta data管理也需要完善 衡量指标：必要数据的完整度 简化授权管理：数据治理的一个核心即要明确谁能在什么时候操作（CRUD：Create, Review, Update, Delete）什么数据，这里牵涉到如何进行授权。那么，在确保风险可控情况下简化授权过程对此目标至关重要。 衡量指标：平均授权时长、风险控制不合规问题数量 提升系统整合效率：IT底层和应用系统的更迭是很快的，数据一向是系统整合时的一大难题。 衡量指标：数据清理和整合的时间与费用、新接口和存储的费用 3. 确保安全、合规和隐私 控制数据泄露风险：所有重要、敏感、隐私数据。 衡量指标：TBD 支持隐私请求：例如定位、删除、导出当事人的个人数据，数据匿名化等。 衡量指标：完成隐私请求的平均时长 实现合规目标：取得合规认证，如SOX、ISO、PCI等。 衡量指标：是否获得认证 降低（预）审计成本：为了应付内外审计所做的预审计工作，或者内部审计。 衡量指标：（预）审计期间所有涉及数据的操作所耗的时间和费用 4. 提高数据可信度 保障财务报表的准确度 衡量指标：TBD 支持基于数据的决策 衡量指标：TBD 如何实现目标？ 流程和控制框架 为了支持以上四大目标，可以从六大方面出发来定义具体的政策、标准或者指引： 数据质量 数据分析与自动化 数据生命周期管理 数据安全 隐私保护 合规 其中很多流程都应当是已存在的，比如数据生命周期管理和数据安全里的大部分流程。但是，以IT服务为出发点设计这些流程和以数据为出发点来设计应当是不同的，比如，数据库管理、备份和归档在IT流程里完全可以分而治之。在理想的情况下，一份数据无论是进入‘生命’的哪个阶段（数据生命周期管理），无论是产生多少复本或者经历改动（数据质量），都应该是可追踪的、可回溯的（合规），并应用一贯的安全、访问（数据安全）或者隐私偏好设置（隐私保护）等策略，其产生的数据分析结果都应当是可信的，这一过程的控制缺陷能够被自动检测甚至修正（数据分析与自动化）。 因此，如何能把这一系列的控制串联起来是很有意思的事情。 --未完待续--]]></content>
      <tags>
        <tag>数据治理</tag>
        <tag>Data Governance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[以色列的Cyber Security访问之旅]]></title>
    <url>%2F2019%2F02%2F10%2FISLCyber%2F</url>
    <content type="text"><![CDATA[以色列的Cyber Security访问之旅 1月底参加了一周的Cyber Security workshop，期间见了超过18家创业安全公司、组织机构或投资公司，受益良多，记录一下。 换个思路看安全 最大的收获是换了一种思路来看安全，挑战传统的安全控制，这在好几家公司的产品设计里可以看出来。总结几点： 得益于标准化的安全管理和产品，以及从业人员丰富具体的简历信息，黑客可以轻松获知一个企业所用的安全产品及部署方式，同时也能够搭建好实验室。黑客不会漫无目的地在企业环境里测试他的工具。在这样有针对性的测试后，恶意软件一旦成功进入并登陆企业系统，没有意外一定会发挥其作用。*这意味着，控制边界很重要！不过在现在企业全球化和云服务的广泛应用后，到底边界在哪里，后面再探讨。*这还意味着，狭路相逢黑客胜，那么最好是不相逢。 恶意软件运作或者攻击行为速度是监控跟不上的，这意味着，依赖分析日志来监测威胁就是在追着攻击行为跑，只能看到一地鸡毛，而无法阻断攻击。这还意味着，我们需要部署自动化手段来阻止威胁的发生，而不应该关注于响应。 当所有应用内部以及有交互的应用或系统的process互信，只允许互信的processs可以通讯，这样的控制颗粒度远远细致于IP和端口的控制。实现了应用层的隔离后，网络隔离还有必要吗？ 给系统和应用打安全漏洞补丁往往需要几个月甚至一年的时间，打补丁过程中还可能使系统宕机，应用出错，这可谓是外敌还没入侵就自乱了阵脚。鉴于大部分攻击和恶意软件都是利用漏洞，补丁又不得不打，漏洞管理是个大难题。换个思路，针对已知漏洞，曝露漏洞的内存位置是已知的，任何非已知进程的调用都可视为恶意行为。针对未知威胁，将整个内存阵地曝露给恶意行为，为正常的进程另造一个内存空间，所有试图访问外露内存的动作视为恶意行为，类似空城计的策略。 何谓重要IT资产（系统or数据），在英文里称之为Crown Jewel，即皇冠上的宝石，最最重要最最需要保护的IT资产。我们常常从业务的角度出发，讨论什么最重要，有时也会从IT的角度出发来看哪些系统需要保护。*常常被忽略的角度是，什么对黑客最重要，即他们的攻击切入点 attack surface。*切入点可以是拥有特殊权限的人员，发布到互联网的IP或api。 当黑客设法盗用或者尾随系统管理员进入系统后，所有监测未知威胁的安全策略都会失去作用，甚至多重加固过的特权账号（复杂密码、每次使用都变更密码、双因子等）对此都会束手无策。当然要做到尾随不是那么容易，这需要植入恶意代码和软件，并不让安全工具发现。众所周知，恶意代码或者软件常常通过邮件、附件、链接来感染系统，很好的解决方法就是隔离日常工作和系统管理维护。凡是给工作带来不便的解决办法是不受欢迎的，并且逐渐失去其目的，理想的系统隔离不应给用户带来任何使用或者观感的变化。 用Blockchain的思路解决IoT入侵检测：Kitsune Framework 有点意思的安全解决方案 下面这些产品有点意思，以上的思路大多来自于这些产品。 Portshift Guardicore Luminate Hysolate TrapX Vicarius Morphisec Cognico Salt security]]></content>
      <tags>
        <tag>Cyber Security</tag>
        <tag>Israel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Managing privacy preference]]></title>
    <url>%2F2019%2F01%2F27%2Fprivacy-preference%2F</url>
    <content type="text"><![CDATA[In a typical user-facing web/mobile app, privacy related user activities can be described as below blue cycle. Next, the privacy preference management requirements can be defined based on this cycle in red. Most requirements should be realized in automatic way. To ensure sustainability, supporting processes in orange should be setup. Most preference management actions are straight forward and should be easy to understand. In terms of what kind of preference to manage, I made a &quot;Who-Do-What&quot; mapping as following graph. If a preference management panel provides capabilities to users to control these items, most scenario's should be covered properly. Big world-wide social networking and Internet platforms, e.g. Facebook, Twitter and Google could be used as reference. Facebook: High-level categories: Details of Privacy Details of Timeline and Tagging Location is an on/off setting. Twitter Google Personalize your Google experience Web &amp; App Activity Location History Device Information Voice &amp; Audio Activity YouTube Search History YouTube Watch History Help people connect with you Help people who have your number connect with you across Google services. Learn more Also help them find your name, photo, and other information that you've made visible on Google. Learn more Control what others see about you Shared endorsements Make ads more relevant to you You can change the types of ads you see from Google when you adjust your interests, age and gender or opt-out of ads based on your interests. Please note that you will still see ads after opting out — they’ll just be less relevant.]]></content>
      <tags>
        <tag>Data privacy</tag>
        <tag>User preference</tag>
        <tag>Consent management</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SAP S/4 Hana Security 学习笔记]]></title>
    <url>%2F2019%2F01%2F23%2FSAP-Hana-Security%2F</url>
    <content type="text"><![CDATA[开启一个新的学习计划：SAP S/4 Hana安全！这篇博客只是记录我的学习过程和心得，不会有什么系统化的解读或看法。所以，这里的心得不保证正确哦。:) 这是个浩大的学习过程，我会不定时更新这篇博客。等我有所成了，再就具体的话题写点东西。 本次更新内容 Unified Connectivity (UCON) administration framework ILM: Information Lifecycle Management 参考资料： SAP HANA Security Technical Whitepaper SAP HANA Security Guide SAP HANA Administration Guide The XS Advanced Programming Model Security Guide for SAP S/4HANA 1709 FPS01 *此文件超~~~~长，慎重跳进这个坑* UI Technology Guide for SAP S/4HANA 1709 FPS01 SAP Information Lifecycle Management 这个章节所有的图都来自于SAP官方 认识SAP S/4 Hana的架构 1. SAP Hana的架构 Hana数据库最大的特征就是数据存储和处理都在内存进行，这区别于所有其他数据库技术。这意味着，数据访问、查询和操作的速度都会大大加快，因为去掉了内存和其他存储间的I/O吞吐。 再看这个应用架构，所有类型的服务都模块化了：Application services和Integration &amp; Quality Services属于支持型的服务；Processing Services是对用户可见的服务；安全（包括高可用、灾备）等设计是基于数据层的，这很有意思。 2. SAP S/4 Hana的架构 仍然是三层架构， SAP S/4是应用层，Hana是数据库层 BW或者其他SAP应用同理 3. SAP Hana安全服务构成 基本上就是AAA: Authentication, Authorization, Accountability + Data Security: Anonymization, Masking, Encryption 这里的数据安全三大块服务可以很好地支持隐私数据保护 SAP介绍的安全服务 数据和日志分别备份到”硬盘 Disk&quot;的不同卷 手工检查备份是否有效、数据能否恢复的方法，有名：审计的好朋友 :) Primary和Secondary系统的高可用模式是Active-Active，实现存储和系统级别的复制 a. 除了上面#1和#2，以下高可用服务是可用的，但需要配置：service auto-restart, host auto-failover 自定义数据分析报表可以将数据源导入Hana（即第三方数据源与Hana建立连接），然后在Hana定义针对此项目的数据访问权限，权限分配给用户 基于SAP Hana的应用开发模型是XS Advanced，支持语言： Java, node.js, SQLScript。基于此模型开发出来的应用可以直接对口Hana数据服务；这意味着，不一定要运行在SAP S/4之上 a. XS Advanced应用用户验证可以使用基于SAML2的验证服务或者SAP Hana自身的身份验证服务 b. 用户权限控制可以到数据行（row-level）级别 c. 用户权限在XS Advanced应用层级完成，不需要SAP Hana的角色role c. 源代码管理可以使用Git d. SAP将不支持传统开发模式 XS Classic 用户管理：使用SAP Hana管理工具：SAP HANA cockpit a. 可以集成LDAP、SAP Identity Management和SAP Access Control；其他类型集成采用Hana SQL接口。再看看单点登录在三种连接情况下的支持性： Single sign-on method SAP HANA JDBC/ODBC XS Classic HTTP(S) XS Advanced HTTP(S) Kerberos/SPNego yes yes planned SAML yes yes yes SAP Logon Tickets yes yes no SAP Assertion Tickets yes yes no JWT yes no yes X.509 no yes planned b. 用户组User Group用与安全策略，如SOD，不是用于数据访问权限管理 c. 角色Role里定义一堆权限，然后分配给用户；也可以用LDAP的安全组管理角色分配 d. 两类权限：SQL (Object)和Analytics；SQL(Object)就是管理对SQL对象的访问权限，Analytics则是数据级别的权限，可以细致到数据行；DB admin默认没有访问数据的权限，需要额外授权 e. 最终用户通过应用层访问数据，需要应用ABAP或者XS Advanced为此用户在SAP Hana新建Analytics权限，权限检查依然可以在应用层完成 支持Dynamic data masking，即不mask原始数据，当没有UNMASKED权限的用户读取数据时，数据会被mask 数据匿名Anonymization同样支持在查询数据时才匿名化 a. 可以将特定字段泛化处理 b. 有专门给data privacy officer可见的视图 c. 可以控制用户访问匿名化数据的权限，也有相关的审计记录 数据加密 a. 备份数据和日志都可以加密 b. 生产数据，即内存里的数据可以针对某个字段column加密 （当然存在“硬盘”disk上也会被加密） c. 应用加密调用SAP Hana的encryption API d. 秘钥存储在SAP的SSFS文件系统，管理秘钥可用工具cockpit；但是字段column级别的加密秘钥需要在SAP Hana和客户端（应用）进行配置。 e. 传输层加密支持TLS/SSL，这包括SAP Hana内部的数据传输 审计日志支持syslog SAP Hana默认部署为多租客模式Multi-tenancy；系统管理则可以集中进行。所以，检查权限时需要同时检查Tenant DB和System DB。 cockpit提供安全配置、维护和管理功能，并提供如下方面的检查清单（和报告？） 存在可用的第三方安全工具和SAP Hana的接口 SAP HANA Security Guide的内容 一般性指引其实就是说打补丁，checklist的话分了两大块：SAP Hana Database和XS Advanced Model，即数据库与应用开发的安全指引。简要列举如下： 1. SAP Hana Database: Users, Roles, Privileges 系统超级管理员SYSTEM和_SYS_REPO，只有这俩有DATA ADMIN（执行所有DDL），DEVELOPMENT（执行alter system）权限；_ SYS_BI_CP_ALL权限有读所有数据权限，默认只有角色CONTENT ADMIN和MODELING有此权限，默认只有SYSTEM有此角色； 默认没有用户有DEBUG权限，不可以将生产环境的DEBUG或ATTACH DEBUGGER指派给任何用户； 角色 CONTENT_ADMIN应只分配给需要更新系统的DB用户； 角色MODELING不应分配给任何用户，应作为模板的存在； 角色SAP_INTERNAL_HANA_SUPPORT有所有底层的系统特权； 不可给用户管理所有Repository的权限，可以分别授权； SYS*密码永不过期； 应只有USER ADMIN权限的用户可以修改CLIENT属性； 完整的标准用户清单 Network Configuration 没啥特别的建议，无非就是网络隔离之类的......网络连接图参考一下： 分布式下网络连接图： Data Encryption 之前讲到秘钥保存在文件系统SSFS，所以就又有个master key，这个在安装时要设置，所以安全地保存此key很重要；同理还有PKI的master key； 所有数据或者日志备份都会有个根加密秘钥root encryption key； SAP Hana client的连接信息（包括密码）保存在hdbuserstore； 默认数据和日志加密是没有启用的。 File system and Operating system OS用户有这些：sapadm (required to authenticate to SAP Host Agent)、&lt;sid&gt;adm (required by the SAP HANA database)、Dedicated OS users for every tenant database if the system is configured for high isolation； 文件的访问权限配置在indexserver.ini，默认权限是640 ([import_export] file_security=medium)； OS安全补丁默认没有安装。 Auditing 审计功能默认没有启用。 Trace and Dump files 没啥特别的，主要是协助运维人员排错的功能。 Tenant database management 所有tenant数据库使用同一个库用于身份验证，所以各个数据库应有自己的证书建立与验证系统的连接，避免一个数据库的用户可以访问其他数据库； 配置黑名单文件multidb.ini，这里定义了哪些配置只能由系统管理员修改； 可以禁用个别数据库功能以限制访问或使用。 2. XS Advanced Model: Administration user 超级管理员用户类型XSA_ADMIN，这应该只用于初始安装和配置，不可用于日常运维； 完整的标准用户清单 Organizations and spaces Space是用来做应用隔离的， 一个Space的应用使用一个OS用户； 不要用&lt;sid&gt;adm或任何特权账号来运行应用； SAP系统应用在SAP Space里； 使用个人账号登录XS CLI，就是说不要用系统或者应用账号。 Network Configuration Platform Router类似于应用网关，接受来自外部的请求，需要合理配置一下； JDBC到SAP Hana的连接默认不加密，需要额外配置一下； 默认下，XS Advanced服务器使用自签名证书。 SAP S/4 Hana Security Guide的内容 这里简要列举通用服务的安全，不涉及业务应用。 1. 用户管理 用户类型、角色和标准用户与此前的SAP版本没有显著差别。S/4有一个新的UI/UX技术，叫做Fiori。基于Fiori的app所带来的用户角色、权限管理会有所不同，具体逻辑见下图： 使用PFCG管理用户角色； Fiori UI定义哪些app可以被用户访问； App的OData service读取有关业务数据； Authentications模块验证用户是否有权限使用这些OData services。 关于新的UI下的用户和App管理，SAP有一系列建议，具体的可以参考UI Technology Guide for SAP S/4HANA 1709 FPS01。大体上就是最小化权限的原则，使用安全协议的连接等。 2. 网络和通讯安全 支持如下协议： HTTP + TLS/SSL RFC + SNC SOAP + Web services security IDoc REST 这里着重提到了SAP ICF，Internet Communication Framework，具体的可以参考这个介绍。简单地说就是一系列安全的API接口，用于ABAP应用与互联网信息传输。既然是面向互联网，很多安全风险需要防范，例如病毒、XSS等，这个可以未来好好研究一下。 3. 病毒扫描 可以对上传和下载文件及模板进行病毒扫描； 白名单需要维护，设置定义在自定义文件ZBASIC和ZEXTENDED； 4. Web安全 针对active content，此间技术是 SAP WebDispatcher和 Internet Communication Manager (ICM)，可以修改HTTP header。SAP的建议是增加以下内容到header： SetResponseHeader X-Content-Type-Options &quot;nosniff&quot; This tells the browser not to try reading the attached file with the assumed MIME type. SetResponseHeader X-XSS-Protection &quot;1; mode=block&quot; This prevents cross-site scripting.* 针对点击劫持（Click-Jacking），是用一种白名单的技术，就是说定义哪些主机和端口下的哪些页面、组件能在应用里显示。据说Fiori的方案还不一样，更安全什么的，具体待研究。 &lt;span id=&quot;update-1&quot;&gt;5. Unified Connectivity (UCON) administration framework&lt;/span&gt; 这是一个RFC连接安全的解决方案，简单地来说就是找出需要用户交互的RFM， 拦截来自外部对所有其他RFM的访问。 据统计，只有很少的RFM是需要用户交互的（大约1%？），其他均是系统调用。 原理是多加了一层安全验证，如下图： SAP有一个应用此方案的指引，可参考Unified Connectivity (UCON) Overview 6. Securing CALL TRANSACTION Statements 在用户调用T-code时检查其权限，系统调用则不用。对于新建的SAP S4/HANA环境，SAP建议值auth/check/calltransaction=3。 7. Read Access Logging 特别针对个人数据启动读数据的日志记录。 &lt;span id=&quot;update-2&quot;&gt;8. ILM: Information Lifecycle Management&lt;/span&gt; 基本框架如下，就是data retention + system decommissioning。列举了几个常见的使用场景： Legal holds：因法务要求控制数据 不晓得正确的中文翻译是啥-_-||| 财务、税务审计 Data retention 销毁数据 指引里有一些关于ILM本身数据安全的说明，还可以参考SAP ILM Detailed Presentation。据SAP文档的描述，该系统也可用于管理非SAP系统的数据。 ​ SAP有张不错的图来描述data lifecycle： ​ ​ 9. 支付卡数据安全 这又是个大坑，下次有空专门写一期这个吧..... --- 未完待续 ---]]></content>
      <tags>
        <tag>SAP Hana安全</tag>
        <tag>SAP S/4 Hana安全</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客的持续集成和Next主题排错]]></title>
    <url>%2F2019%2F01%2F22%2FBlogCI%2F</url>
    <content type="text"><![CDATA[我在上篇博客Hexo+Github建个人博客里写了如何搭建这个博客，在那之后我又做了些事，比如：对我的博客做了一些优化、同时发布到coding.net以便国内用户访问、绑定个人域名、推送网站给Google和百度搜索等。这些操作相对问题不多，网上有很多人写了详细步骤做参考。但是，在我弄持续集成时参考了很多人的文章和Github上的问题解决方案，还是折腾了很久才搞定，我决定把这个过程记录下来做参考。 环境构成和平台 HEXO --- 博客的框架 Next --- 主题 Github --- 代码托管和Pages服务 Appveyor --- 持续集成平台 为什么持续集成 因为源代码都在一台电脑上，意味着我编辑好博客内容后，要在这台电脑上敲hexo g &amp;&amp; hexo d发布，换一台电脑就不行了。而且要是源代码在这台电脑上丢失或者损坏了，就只能重新部署和配置hexo和Next了，然鹅在经过长时间的优化、配置修改和插件安装后，我哪里还记得要装什么，要改什么。 所以，解决如上问题的方案是持续集成，英文叫做Continuous Integration。 解释下逻辑 电脑1 -----&gt; | 电脑2 -----&gt; --- Git Push to source code repo --- &gt; Github &lt; ---Build in Pages repo-- &gt; Appveyor | 电脑N -----&gt; 所有电脑上的更新推送到Github的源代码分支 (你可以自定义分支名称，我的叫Hexo) Github库和Appveyor已经集成了，所以源代码分支一产生更新，Appveyor执行一次build Appveyor的Build任务将生成的静态网页内容推送到Github的Pages服务所用的分支 (默认是master) 完成！ 直接用Hexo d的逻辑也就是：Hexo在本地生成好静态网页内容并推送到Github的Pages服务所用的分支。 理解了就可以开干了 :) 准备工作 注册Appveyor，有免费滴！ 本地和GitHub建立SSH信任：具体步骤在上一篇博客讲了；以后的其他电脑都需要做这一步骤 建立并推送源代码分支到Github 源代码分支在后面叫做Hexo 显示本地博客根目录的隐藏文件 如有.git，删掉。 编辑.gitignore，修改为如下内容；这个文件告诉Git哪些目录不需要推送 public/ .deploy*/ 新建Git分支 12345678git init #初始化Gitgit remote add origin git@https://github.com/xxxxxxxxxxxxxxx.git #添加你的Git库git pull origin master #把当前的master分支拉下来，避免后面冲突git branch hexo #新建分支hexo放源代码git checkout hexo #切换到hexo分支git add . #将除了.gitignore以外的内容添加到hexo分支git commit -m "XXXX" # -m就是message的意思，给这次commit备注一下git push origin hexo # 将分支推送到Git库 新建Appveyor持续集成项目 选择Github，settings里将Default branch和branches to build修改为hexo，即源代码分支 进入Environment，添加如下环境变量，GIT_USER_EMAIL和GIT_USER_NAME就是你的git用户名与邮箱地址，用来连接Github；TARGET_BRANCH就是静态网页所在的分支。 在Github的个人账号的Setting &gt; Developer settings &gt; Personal access tokens里新建一个Token。 用Appveyor的工具加密token。 在博客根目录下新建一个文件，命名 为appveyor.yml，内容如下，请参考备注决定你需不需要这些步骤。我在网上搜到的很多版本貌似都比较老旧了，不太适用于新版本。 1234567891011121314151617181920212223242526272829303132333435clone_depth: 6environment: access_token: secure: [这里放加密后的token，不需要[]]install: - ps: Install-Product node 10.0 #安装最新版node - node --version - npm --version - npm install npm@latest -g #安装最新版npm - npm rebuild node-sass #因build报错，我需要rebuildnode-sass，如果没有此报错则不需要 - npm install hexo-cli -g #安装hexo - npm install #安装package.json里的所有依赖包 build_script: - hexo generate # hexo生成静态网页 artifacts: - path: public #静态网页放在public目录下 on_success: #下方脚本是为了推送静态网页到相对应的Github库和支线 - git config --global credential.helper store - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:access_token):x-oauth-basic@github.com`n" - git config --global user.email "%GIT_USER_EMAIL%" - git config --global user.name "%GIT_USER_NAME%" - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\static-site - cd %TEMP%\static-site - del * /f /q - for /d %%p IN (*) do rmdir "%%p" /s /q - SETLOCAL EnableDelayedExpansion &amp; robocopy "%APPVEYOR_BUILD_FOLDER%\public" "%TEMP%\static-site" /e &amp; IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1)) - git add -A - git commit -m "Update Static Site" - git push origin %TARGET_BRANCH% - appveyor AddMessage "Static Site Updated" 使用持续集成：每次更新（包括修改了配置文件）只需执行以下步骤即可。 123git add . #将除了.gitignore以外的内容添加到hexo分支git commit -m "XXXX" # -m就是message的意思，给这次commit备注一下git push origin hexo # 将分支推送到Git库 Appveyor随机会自动执行appveyor.yml里定义的build步骤，打开控制台就可以看到完整的过程和结果。 修复Next主题无法推送的问题 完成上一节的步骤后，居然发现网站一片空白…… 我查了半天，才发现原来是因为Next主题的所有文件都没有被推送到Hexo分支，网上提供的方案大致有：1、删除Next下的Git；2、使用subtree；3、使用submodule。方法2和方法3据说比较好，支持未来版本升级。但是我用了方法1，因为简单方便，希望版本升级的话请查询其他人的博客。 删除next目录下的隐藏文件夹.git 编辑next目录下的.gitignore，删除所有有关source/lib，因为大部分的第三方工具都会被跳过。 打开source/lib，这里放了你启用的所有第三方工具的文件。对于必须的工具，删除这些目录下的.git文件夹。不操作这一步的结果是，这些工具的文件不会被上传到Github，网页不会正确、全部显示该有的信息或者功能。 执行如下步骤： 1234git rm -r --cached themes/next/ #去除分支里的缓存，同样针对必需的第三方工具，用相同的命令去除缓存，相应的目录就是themes/next/source/lib/XXXXXgit add . #将除了.gitignore以外的内容添加到hexo分支git commit -m "XXXX" # -m就是message的意思，给这次commit备注一下git push origin hexo # 将分支推送到Git库 这下是真的搞定了！不过上述步骤真的是简单暴力，请自行评估哦。]]></content>
      <tags>
        <tag>how to</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to respond to internal audit]]></title>
    <url>%2F2019%2F01%2F18%2FIT-IA%2F</url>
    <content type="text"><![CDATA[How to respond to internal audit? After many years being participating in different audits and acting as an internal auditor, I believe writing this post would help clarify a lot questions people have about audit. More importantly, this is for IT guys to know how to respond an internal audit. @[TOC] know about IT internal auditor Before stepping into any practical tips, let's know something about IT internal auditor firstly. I built a persona for this group of peoples, and I call her Ivy. I put words version to reference part to help reading. How to respond to internal auditors Assuming you have read through above persona, as it explains why I put following tips. 1. Be honest and transparent Internal auditors are exactly as same as you, as employees of the company aiming to add value and know how this company works. Sometimes, they move to internal auditor position from your function area, maybe used to be former you. If you try to hide something or are bluffing, you just let them doubt your credibility and let them question everything you say after (even you may answer honestly to other questions). When auditors find the real answer, you will make yourself silly. For sure, you can keep denying, but man, what is the value ? Take care of your reputation within the company. 2. Share known gaps and action plans If you have already known some gaps and made action plans or projects to remediate, don't wait for auditors to find them out, share from the beginning. For known issues with proper action plans in place, they normally should not be seen as audit issues. But, please do not try playing clever on this point. For example, planning to fix a critical issue with a super long time period, fix partial issue, or making a fake plan, for sure you deserve audit issues. 3. Assume auditors know nothing about your area or expertise Auditors cannot be experts in everything, that means they may not understand how the tool or protocol works, or why a process is designed as such. They would ask you step by step how it works, and may go back to previous questions many times. Conversation seems very simple and even boring. When you have been working in this area for many years, you may not notice some steps you take and don't see the risk. Auditors have good risk mindset, they try to break processes down to see where it may go wrong. To those potential risky points, they will try materializing them by analyzing history data and logs, and doing tests, etc. So, help auditors know all the details and they could help you to identify risks, it's win-win. 4. Define action plan together with auditors If you think you must do what auditors ask for, I have to say this is a wrong perception. Auditors are good at risk, but they may not know as much as you do in your area or expertise. Auditors normally give you suggestions and seek for your feedback. Don't doubt about it, they really need your feedback, not just to be polite. Take some time to work together with them to define action plans making sense to both sides. Once an audit report is finalized and distributed to management, it will be very difficult to change the action plan or the target date. 5. Disagree with supporting evidences and risk explaination As said previously, auditors are sharp and know how to identify risks, it does not mean their opinions are always right. When you strongly believe that the audit issue is not true, debate with supporting evidences and ideally prove the risk scenario described by auditors would not stand. Just saying 'No, I don't think so' or speaking loud will not make your opinion strong or make anyone agree with you. It will only make you like a rude and cueless child. In simple word, try to be constructive. It's all for now, I'll come back to update when new tips come up. Good Luck ! Reference IT Internal Auditor Persona - Ivy Values - What value Ivy brings to the company? An independent challenger, helping the company to build a strong system to control IT risks Goals - What Ivy wants to achieve? Provide independent assurance to challenge the ‘status quo’. Drive IT organization improving the risk management maturity. Raise awareness of technology and improve risk mindset across the company. Needs - What Ivy needs to do? Define review plan via analyzing key risks, technology trend, IT strategy and road-map. Appraise risks and good practices via performing review, assessment and/or advisory missions in technology area. Develop pragmatic recommendations on risk remediation action plans, and follow up on the implementation. Report conclusions to management team and recommend corrective actions and other improvement suggestions to improve the effectiveness and efficiency of risk controls. Contribute to the development of IT governance activities throughout the company, including ongoing development of IT controls frameworks for key IT related risk areas, risk management frameworks, product/project management methodologies and audit methodologies. Foster and maintain effective and constructive relationships with key stakeholders. Improve the effectiveness and efficiency of way of working within own function, such as the way of performing review, reporting, data analytics, testing, risk evaluation. Instill to management team and wide range of stakeholders about IT controls, policies, standards, good practices and key risks. Frustrations - What makes Ivy frustrated? Low level of cooperation and transparency from stakeholder from a preconception of seeing auditor as a trouble maker or seeing audit missions as non-relevant work. Audit issues are closed while the implementation is not fully in place or in a sustainable way. Lose track of action implementation due to owner changes within IT organization. Low priority actions are long-time overdue. Pain Points - What pain points does Ivy have? Lack of good quantitative risk rating method and the pressure of 'targeting for 0 major audit issue' lead to long-time dispute. Thereby, risks and actions are not thoroughly discussed. Risks that cannot directly impact security, compliance or core business, such as user experience and productivity, are difficult to be materialized or accepted as audit finding. Some IT auditors may not have technical skills to materialize issues. Motivators - What motivates Ivy to take certain actions? Internal auditors may have target about closing audit issues in certain time period, that they would be driven to raise less critical issues or to close issues partially to meet the target. An audit mission may have to meet certain deadline or have limited resource, that auditors would not test or review all control points.]]></content>
      <tags>
        <tag>internal audit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络安全法和电子商务法里的IT控制要求]]></title>
    <url>%2F2019%2F01%2F16%2FChina-regulations%2F</url>
    <content type="text"><![CDATA[网络安全法和电子商务法里的IT控制要求 说在前面 本文章纯属作者从IT（信息技术）的视角对两个法律的解读，总结出来的内容用于个人学习和讨论的用途，任何单位和个人不得用于商业用途。文章内容的版权和解释权归作者所有。此外，作者不是法律专业人士，不保证解读内容的准确性和完整性，内容不得用于任何与法律有关的学习或者活动。如有任何单位和个人对内容有异议，应该及时向本站书面反馈，并提供身份证明、权属证明或详细情况证明，本站在收到上述文件后将会尽快更新或者移除相关内容。 更多免责条款请参见本站的免责声明。 重要的说明 本文不再赘述有关网络安全法和电子商务法的背景、意义、生效日期、条款内容等基本信息，有兴趣的人请自行Google或者百度。 为了便于比较和分析，我将与IT有关的条款分别打了标签，用于注明其所属的控制领域。如果有人感兴趣具体条款和标签如何对应的，请留言，我会再写一篇文章公布细节。 在后续的分析中我会提到哪些控制要求比较有中国特色，哪些属于常见的行业标准。 涉及网络安全的，由于行业标准和各国法规十分多，分类依靠本人长期的工作经验总结所得，就不罗列所有的标准了。如果哪位同学做出了条款和各大行业标准对照表的，请不吝分享。 涉及电子商务的，我参考了英国的The Electronic Commerce (EC Directive) Regulations 2002以及Guide to Privacy and Electronic Communications Regulations和欧盟对电子商务网站的指引。至于为什么只参考了这些呢，Google出来的前几项就是答案 :D 未来有空时，我会去研究研究其他国家或地区的要求的。 涉及电子支付的，我参考了欧盟的Payment services (PSD 2) - Directive (EU) 2015/2366。 因为存在多个条款同属一个控制领域，某些条款比较有中国特色，某些比较行业内常见，所以当你看到我说某一个控制领域是有中国特色的，这不意味着整个控制领域都是中国独有的，请不要急于反驳，建议温和地留言并提出你的意见或者问题。谢谢支持。 由于本人长期使用的工作语言是英语，有时候对专业术语的中文表述不是很准确，请见谅。;) OK，把重要的免责声明和内容说明都讲清楚了，接下来我就直接开始正题了 :) @[TOC] 1. 控制领域概况 网络安全法 首先网络安全法，我归类出7个大的领域 （排名不分先后）： 数字化安全（Digital Security） 合规 隐私保护 治理体系 分级分类 业务持续性 合同与协议 进一步归类并且统计每一类的要求数量，参见下图。可见，要求较为集中在数字化安全（Digital Security）和合规领域。其中，又以安全事故响应和国家安全审查的要求最多。区别于其他安全规范，网络安全法里特别提及了隐私保护。 作为一个法律文件，它不会提及具体的安全技术或者流程要求，这需要基于安全管理者的经验和认识进行实施。举个例子，第二十一条这么定义的： 第二十一条 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改： （一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任； （二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施； （三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； （四）采取数据分类、重要数据备份和加密等措施； （五）法律、行政法规规定的其他义务。 所以，到底要求仅仅是列举出来的这5条，还是更多？ 偷懒的做法是只关注这5条并有很强的说辞来坚持这个看法；这种情况其实很常见，尤其当没有足够的预算时。 不过实事求是地看这条要求，重点其实是保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改。虽然访问控制没有在5条里特别说明，我们不能否认这项控制对于达到如上目标的重要性。 电子商务法 然后看电子商务法，我归类出7个大的领域 (同样，排名不分先后)： 用户权益 合规 电子支付 合同与协议 隐私保护 治理体系 数字化安全（Digital Security） 具体参见下图，可见，用户权益和电子支付被着重提及的领域。数字化安全（Digital Security）看似没有特别描述，但是不要忘记网络安全法哦，合规可不是合一个法律的规就行了。:) 电子商务法的隐私保护和网络安全法的隐私保护有什么区别？ 隐私保护&lt;br /&gt;子领域 电子商务法 网络安全法 信息收集 无明显区别 无明显区别 信息透明 服务提供者公示隐私请求管理流程的责任 无特别提及 合法合规 提供信息给有关主管部门的要求 无特别提及 数据分析和推送 使用数据分析推送广告的要求 无特别提及 数据安全 无明显区别 无明显区别 数据泄露 无特别提及 针对数据流露处理和响应的要求 知情同意 无特别提及 收集和使用信息前获得用户同意的要求 隐私请求管理 增加了用户注销的要求 其他处理用户有关隐私的请求的要求无明显区别 我把两个法律要求集中分析了以下，发现关键词出现最频繁的是...... 2. 网络安全法 vs 电子商务法 简单地对比一下两个法律的侧重领域，见下图。显然用户权益和电子支付是电子商务法特有的，然而，*（我有点意外）*分级分类和业务持续性竟然在电子商务法没有特别提及。可能电子商务法还是更侧重在商务领域吧。 我的个人看法：即使不具体列举业务持续性的要求，像“数字化安全（Digital Security）”一样提及一下也是必要的。当电子商务对行业发展变得这么重要后，平台的高可用和容灾能力直接影响业务的可用性，这并不比数据安全的重要性低。 3. 较有中国特色 vs 行业内常见 这个章节也是为了抛砖引玉，我可能有理解不到位的地方，仅供大家参考。 没有意外的是合规性要求比较多，例如实名制、资格审查、内容管理、境内储存关键数据、报送有关主管部门等等。 需要特别指出的是，“较有中国特色”是个中性词，这不意味着要求是负面的或总是有关政府的，有些要求还蛮有创意，个人认为挺不错的。举个例子，电子商务法的第三十九条： 第三十九条 电子商务平台经营者应当建立健全信用评价制度，公示信用评价规则，为消费者提供对平台内销售的商品或者提供的服务进行评价的途径。 电子商务平台经营者不得删除消费者对其平台内销售的商品或者提供的服务的评价。 这条关于信用评价制度的要求自然是有益于服务提供者和消费者的。这在很多国内外的电子商务平台可能都有了，但是在法律里规范地写出来，无疑是进步的。同样的例子还有推送广告时要向该消费者提供不针对其个人特征的选项，尊重和平等保护消费者合法权益的要求。 还有几条十分细致的，对实际操作有影响的要求，这样细致的要求我还没在英国或者欧盟的法律文件里看到。（如果我理解错了，这只是由于我的阅读量不够，请指正） 例如： 第十九条 电子商务经营者搭售商品或者服务，应当以显著方式提请消费者注意，不得将搭售商品或者服务作为默认同意的选项。 第二十一条 电子商务经营者按照约定向消费者收取押金的，应当明示押金退还的方式、程序，不得对押金退还设置不合理条件。消费者申请退还押金，符合押金退还条件的，电子商务经营者应当及时退还。 具体看看到底涉及哪些较有中国特色的控制要求...... 再附上行业内常见的控制要求作为参考...... 4. 控制要求的适用范围 最后，简单地看一下适用范围： 是不是发现要求少了很多，压力稍微减轻了点？:D 再看电子商务法的，按角色对号入座后，要求其实也不是很多。 欢迎讨论]]></content>
      <tags>
        <tag>中国法规</tag>
        <tag>网络安全法</tag>
        <tag>电子商务法</tag>
        <tag>安全合规</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DevOps benchmarking metrics and review framework]]></title>
    <url>%2F2019%2F01%2F11%2FDevSecOps-Measurement%2F</url>
    <content type="text"><![CDATA[Context While DevOps model has been widely adopted by IT organization, I do not find a good framework to centrally measure the maturity of the model as well as the user experience as outcome. So, I try to build one to provide a clear guidance, and I'd like to call it DevOps benchmarking metrics and review framework. This is not created from scratch, but is based on a lot of works and analysis done by different orgs. The major source of reference is DevSecOps guides from GSA. I hope this could be a good reading materials for peoples managing a DevOps team or working in security, compliance and risk areas. This is a high level review guideline, not a cookbook of DevOps or review. If you have any comments or questions, please leave a message below or contact me via email which can be found from my blog. @[TOC] What do we want to achieve through DevOps? First of all, we expect the team having a sustainable way to improve user experience continuously. User means not only end user, but also other business stakeholders and IT support partners. To achieve that, the key capabilities should be defined from both DevOps model and the product perspectives. I draw a diagram to better explain the relationship between the aim and the key capabilities, as below. What to look at for the capabilities we want to achieve? Ok, now list down the main topics for assessing the capabilities identified above. I group them in 3 pillars: Governance, Process and Technology. The code of each capability (A, B, C, D) is put next to each topic to link them up. Governance Process Technology Team structure &amp; location A C Demand shaping &amp; biz value tracking A C Automation capability&lt;br /&gt;(both biz and IT processes) A B D Role &amp; responsibility &amp; people profile&lt;br /&gt; (both internal &amp; external resources) A B C D User centric design&lt;br /&gt;* User interviews&lt;br /&gt;* Industry reviews&lt;br /&gt;* Product definition &amp; roadmap&lt;br /&gt;* A/B testing A C Resilience of technologies&lt;br /&gt;* Risk level (from legal, security, compliance standpoints)&lt;br /&gt;* Availability of the 3rd party services&lt;br /&gt;* Development/update lifecycle A B D Budget allocation &amp; procurement A B DevSecOps model&lt;br /&gt;* Agile planning (incl. Change management)&lt;br /&gt;* CI &amp; CD&lt;br /&gt;* Testing strategy &amp; quality assurance&lt;br /&gt;* Logging &amp; monitoring&lt;br /&gt;* Application security&lt;br /&gt;* Risk management A B C D Targeting setting A B Business continuity&lt;br /&gt;* High availability&lt;br /&gt;* Disaster recovery B D Which metrics can be used to measure these capabilities? After all, it's always preferred by management team to have more visualized way to know the performance of the model or the product. Of course, it's also important to have some quantitative KPIs to know which areas still needs improvement. However, please be noted that, when we decide to improve certain capability, we should look back to relevant topics and good practices of those topics, but not focus on how to change the value of KPIs. Why? the later way might lead to KPI manipulation and fake assessment. ;) Below graph gives an overview of metrics under each capability, the detailed definitions can be found in &quot;Reference&quot; section. It's suggested to focus on the velocity of maturity improvement, than current maturity level. The reason is simple, as we expect the team to keep improving at a comfortable speed, but not be satisfied with what it is now. Reference Details of review topics This could be a good reference to perform a holistic review, I will not further elaborate what to review under each topic. Governance pillar Team structure &amp; location Role &amp; responsibility &amp; people profile (both internal &amp; external resources) Budget allocation &amp; procurement Targeting setting Process pillar Demand shaping &amp; biz value tracking Business cases or KPIs definition, quantitative KPI calculation method Business case tracking and validation Collaboration with business and user story definition User centric design User interviews Industry reviews Product definition &amp; roadmap A/B testing DevSecOps model Agile planning (incl. Change management) The flow of work: what are the steps it takes to get a Story to Done? what is the definition of done? Tracking of the flow Built-in quality: link technical standards to work items Emergent design vs Intentional architecture: project specific design vs long-term strategy Routines for planning: regular personal review and team review, backlog refinement, iteration review, iteration retrospective CI &amp; CD Branching and merging policies Tepository management Dev/Test/Prod environment and pipeline setup Ways of deployments Build and release automation: including all mandatory test/scan/approval/technical requirements steps Testing strategy &amp; quality assurance Testing strategy and mapping with CI/CD Success criteria and target setting Automation tools for all types of tests Code scan: for quality, security including dependencies Manual test and feedback Bug tracking Logging &amp; monitoring Logging requirements and enables Consolidation of logs, alerts, reports Monitoring tools Tracking of security events, errors, performance issues Application security Security automation Security hardening and monitoring at platform layer Secrets (key/token/privileged credentials) protection API and web services security configuration and monitoring Vulnerability identification and patching process Data loss prevention Risk management Pilot from risk perspective Knowledge base and training Dependencies on people and procurement processes Architecture and security review Business continuity High availability Disaster recovery Technology Pillar Automation capability (both biz and IT processes) Automation platform Continuity of automation platform Control design in automation Identity and access management Development lifecycle Logging and monitoring License compliance Resilience of technologies Risk level (from legal, security, compliance standpoints) Availability of the 3rd party services Development/update lifecycle Details of benchmarking metrics The following weights of metrics and maturity values are defined based on my personal perspective from work experience, i.e. very subjective. Anyone who likes to adopt these metrics, should take the risk appetite of the organization into account and adjust them. Productivity Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Deployment frequency Number of deployments to production Past 6 months 5% &lt;=1 or &gt;24 &lt;=6 &lt;=24 Change volume Average number of user stories deployed in one sprint divided by working days of a sprint Past 6 months 10% &lt; 0.2 or &gt; 1 &gt;= 0.2 and &lt;= 0.3 &gt; 0.3 and &lt;= 1 Mean change lead time Mean time between a code commit and production deployment of that code Past 6 months 15% &gt; 1 month &gt;= 2 weeks &lt; 2 weeks Mean Time to realize value Mean time between a feature request and realization of business value from that feature Last 3 releases 10% &gt; 1.5 years &gt; 9 months &lt;= 9 months Mean time to operate Mean time between the beginning of Sprint 0 to achieving authority to operate Last 3 releases 20% &gt; 1 month &gt;= 2 weeks &lt; 2 weeks Test automation percentage Percentage of test cases automated. All active features 15% &lt; 50% &lt; 80% &gt;= 80% Developer onboarding mean time Time from a developer joining the team to ability to commit code for production deployment Past 1 year 15% &lt; 2 weeks or &gt;= 2 months &gt;= 1 month and &lt; 2 months &gt;= 2 weeks and &lt; 1 month Mean time from sourcing to contract Mean time from the beginning of sourcing process to contract sign-off Past 1 year 10% &gt; 3 months &gt; 1 month &lt;= 1 month Risk management capability Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Mean time to recovery Time between a failed production deployment to full restoration of production operations All active features 15% &gt; 1 day &gt; 1 hour &lt;= 1 hour Mean recovery point Mean time range of data that is lost due to an incident All active features 15% &gt; 1 day &gt; 1 hour &lt;= 1 hour Bug volume Average number of bugs reported after a release Last 3 releases 5% &gt;= 50 &gt; =10 and &lt; 50 &lt; 10 Bug Resolution time Mean time to resolve a bug Past 6 months 10% &gt; 3 days &gt; 1 day and &lt; 3 days &lt;= 1 day Mean time to patch vulnerability Mean time between identification of a vulnerability in the platform or application and successful production deployment of a patch Past 6 months 10% &gt; 3 weeks &gt; 1 week &lt;= 1 week Logging availability Percentage of systems that are logging. Platform &amp; application 10% &lt; 50% &lt; 80% 100% Monitoring availability Mean time from event generation to being available to support team Past 6 months 5% &gt; 1 hour &gt; 10 mins &lt;= 10 mins Deployment review percentage Percentage of deployments being reviewed from architecture or security Past 1 year 10% &lt; 50% &lt; 80% 100% Secure secret percentage Percentage of app secrets are securely created &amp; accessed without any human interactions. All active features 10% &lt; 50% &lt; 80% 100% Privilege auditing frequency Number of times that users and their privileges are audited Past 1 year 10% &lt;= 2 &gt; 2 and &lt;=12 &gt; 12 Usability Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Completion rate of user tasks Percentage of user tasks completed successfully versus total tasks All active features 35% &lt; 50% &lt; 80% 100% Mean time to complete user tasks Mean time for users to complete tasks All active features 35% &gt;10 mins &gt;1min and &lt;= 10 mins &lt;= 1 min Test level satisfaction Average level of overall impression of user experience (on a 5-point scale) Last 3 releases 30% &lt; 2 &lt; 4 &gt;= 4 Reliability Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Availability Amount of uptime in accordance with the SLA In a year 25% &lt;= 99% &lt; 99.99% &gt;= 99.99% Test coverage Percentage of code or feature that is covered by unit, integration, functional and security tests All active features 25% &lt; 50% &lt; 80% 100% Security benchmark deviation Deviation between security benchmarks applied and the baseline Platform &amp; application 25% &gt; 50% &lt;= 50% and &gt; 0% 0% #of MICS control deficiencies Number of key control deficiencies in MICS assessment report Latest report within the quarter 10% &gt;= 3 or no report &gt; 0 and &lt; 3 0 #of monitoring alerts Amount of monitoring alerts triggered Past 6 months 15% thousands hundreds tens]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>review framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github建个人博客]]></title>
    <url>%2F2019%2F01%2F05%2Fhexo-github%2F</url>
    <content type="text"><![CDATA[注册一个Github账号，新建一个repository 命名方式&lt;Github用户名&gt;.github.io，比如我的库叫做yangxfang.github.io。操作完毕后将这个名字输入浏览器地址栏就可以访问个人博客网站啦。 至于repository的设置，这是个Public库 :) ​ 在Settings里找到Github Pages，这里可以选择一个主题。这里就可以知道在Github里搭建个人博客依赖的技术就是Github Pages啦。 ​ 本地安装Hexo，发布到Github 安装依赖组件：Git、Node.js；Windows、Mac或Linux版本均有。 Mac上的命令如下 123sudo brew install gitsudo brew install nodejssudo brew install npm Node.js的安装也可以是： 1curl https://raw.github.com/creationix/nvm/master/install.sh | sh 安装Hexo 1npm install -g hexo-cli cd 你的个人博客源文件目录，也可以不用特别指定目录 1234hexo init myblog #自定义名字cd myblog #进入这个myblog目录npm install #配置nodehexo g &amp;&amp; hexo s #这会创建基础网页，启动Hexo服务，根据提示拷贝http://localhost:4000/进入浏览器查看，按ctrl+C停止服务 安装网站主题，Hexo网站上有非常多主题可选，我选了NexT（详细介绍见https://theme-next.org） 1git clone https://github.com/theme-next/hexo-theme-next themes/next #安装完成后可以在Themes目录下看到next目录 配置hexo，编辑_config.yml 1vi _config.yml #我用VIM编辑，当然你也可以用其他工具编辑 网站基本信息： 网站主题配置为next，部署方式为git，部署地址为github库的完整url，所属的库branch为master 当然你可以部署到其他branch，那就要去库的设置里把Pages的branch修改一下 配置主题，编辑themes/next/目录下的_config.yml NexT的扩展性很好，有很多插件可以启用，它的中英文网站有具体的说明，下方稍微列举下我配置的。 网页上可见的目录，默认只有home、archives，如需要就去掉#。 主题设置，默认Muse，我的是Gemini 启用回到顶部b2t，显示下滑条百分比scrollpercent 注意此选项仅对Pisces和Gemini主题有效 评论功能 :D，这里我使用了Valine 要用这个功能需要注册Leancloud（免费版即可），新建一个myblog的应用，在应用配置里找到appid和appkey，填在下方 同时还可以利用Leancloud来统计每篇文章的访客数量，可以使用相同的appid和appkey 还没完，在hexo的主_config.yml也需要配置 安装有关组件并注册： 12npm install hexo-leancloud-counter-security --savehexo lc-counter r 用户名 密码 启用分享到其他社交网站的功能 注意 很多功能是需要安装依赖包的，具体都会描述在Dependencies里，这就需要回到Hexo myblog目录来安装这些包，例如： 1git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton 搜索功能 主页不显示全文，仅预览 配置文件那么长，自己多多发掘好用的功能吧 :) 终于要发布到Github了，让Github和本机相互信任一下 :) 生成SSH 123git config --global user.name "yourname" #用的是Github的用户名git config --global user.email "youremail" #用的是注册Github的邮箱地址ssh-keygen -t rsa -C "youremail" 在执行目录下找到公钥pub和私钥 回到Github的个人设置页面，创建一个新的SSH and GPG keys，将公钥内容完整复制到key里，完成后就长这样吧 部署Hexo 12npm install hexo-deployer-git --save #安装组件hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 部署完毕后，就可以在Github的库里看到所有的文件，打开网址yangxfang.github.io 就👌啦 写博客 新建博客 1hexo new post "标题" 新的md文件就会出现在source/_posts/目录下 编辑内容 md文件需要用Markdown编辑工具，我用的是Typora 在文章内插入图片，这真是折腾了我好一会。在_config.yml里找到配置post_asset_folder:改成true。修改之后，新建一个post时，hexo会自动建立一个同名的文件夹，在编辑md时把图片放在这个目录下即可。 在文章内插入目录， 首先安装组件 12npm i hexo-renderer-markdown-it --savenpm i hexo-renderer-markdown-it-plus --save 在_config.yml里添加如下内容 12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: pre_class: highlight 在文章内需要插入目录的位置输入`@[TOC]` 发布 1hexo g &amp;&amp; hexo d 如果觉得github.io网址不够酷 那就自己买个域名，解析为Github的IP，在GitHub里设置自定义的域名，source目录下创建cname文件（无后缀），写进自定义的域名，最后，再发布一次Hexo到Github 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d **博客最最最重要的当然就是内容，我要不断学习Markdown编辑方式，把自己的学习和心得体会都记录下来 ^ ^ **]]></content>
      <tags>
        <tag>how to</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Starting my blog]]></title>
    <url>%2F2019%2F01%2F01%2FStarting-my-blog%2F</url>
    <content type="text"><![CDATA[2019年计划 写个人博客 每天一杯咖啡 坚持义工写信 坚持每周跑步、健身 学会开车]]></content>
      <tags>
        <tag>Say Hi</tag>
      </tags>
  </entry>
</search>

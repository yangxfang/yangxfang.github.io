<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DevOps benchmarking metrics and review framework]]></title>
    <url>%2F2019%2F01%2F11%2FDevSecOps-Measurement%2F</url>
    <content type="text"><![CDATA[Context# While DevOps model has been widely adopted by IT organization, I do not find a good framework to centrally measure the maturity of the model as well as the user experience as outcome. So, I try to build one to provide a clear guidance, and I’d like to call it DevOps benchmarking metrics and review framework. This is not created from scratch, but is based on a lot of works and analysis done by different orgs. The major source of reference is DevSecOps guides from GSA. I hope this could be a good reading materials for peoples managing a DevOps team or working in security, compliance and risk areas. This is a high level review guideline, not a cookbook of DevOps or review. If you have any comments or questions, please leave a message below or contact me via email which can be found from my blog. Context What do we want to achieve through DevOps? What to look at for the capabilities we want to achieve? Which metrics can be used to measure these capabilities? Reference Details of review topics Governance pillar Process pillar Demand shaping &amp; biz value tracking User centric design DevSecOps model Agile planning (incl. Change management) CI &amp; CD Testing strategy &amp; quality assurance Logging &amp; monitoring Application security Risk management Business continuity Technology Pillar Automation capability (both biz and IT processes) Resilience of technologies Details of benchmarking metrics Productivity Risk management capability Usability Reliability What do we want to achieve through DevOps?# First of all, we expect the team having a sustainable way to improve user experience continuously. User means not only end user, but also other business stakeholders and IT support partners. To achieve that, the key capabilities should be defined from both DevOps model and the product perspectives. I draw a diagram to better explain the relationship between the aim and the key capabilities, as below. What to look at for the capabilities we want to achieve?# Ok, now list down the main topics for assessing the capabilities identified above. I group them in 3 pillars: Governance, Process and Technology. The code of each capability (A, B, C, D) is put next to each topic to link them up. Governance Process Technology Team structure &amp; location A C Demand shaping &amp; biz value tracking A C Automation capability(both biz and IT processes) A B D Role &amp; responsibility &amp; people profile (both internal &amp; external resources) A B C D User centric design* User interviews* Industry reviews* Product definition &amp; roadmap* A/B testing A C Resilience of technologies* Risk level (from legal, security, compliance standpoints)* Availability of the 3rd party services* Development/update lifecycle A B D Budget allocation &amp; procurement A B DevSecOps model* Agile planning (incl. Change management)* CI &amp; CD* Testing strategy &amp; quality assurance* Logging &amp; monitoring* Application security* Risk management A B C D Targeting setting A B Business continuity* High availability* Disaster recovery B D Which metrics can be used to measure these capabilities?# After all, it’s always preferred by management team to have more visualized way to know the performance of the model or the product. Of course, it’s also important to have some quantitative KPIs to know which areas still needs improvement. However, please be noted that, when we decide to improve certain capability, we should look back to relevant topics and good practices of those topics, but not focus on how to change the value of KPIs. Why? the later way might lead to KPI manipulation and fake assessment. 😉 Below graph gives an overview of metrics under each capability, the detailed definitions can be found in “Reference” section. It’s suggested to focus on the velocity of maturity improvement, than current maturity level. The reason is simple, as we expect the team to keep improving at a comfortable speed, but not be satisfied with what it is now. Reference# Details of review topics# This could be a good reference to perform a holistic review, I will not further elaborate what to review under each topic. Governance pillar# Team structure &amp; location Role &amp; responsibility &amp; people profile (both internal &amp; external resources) Budget allocation &amp; procurement Targeting setting Process pillar# Demand shaping &amp; biz value tracking# Business cases or KPIs definition, quantitative KPI calculation method Business case tracking and validation Collaboration with business and user story definition User centric design# User interviews Industry reviews Product definition &amp; roadmap A/B testing DevSecOps model# Agile planning (incl. Change management)# The flow of work: what are the steps it takes to get a Story to Done? what is the definition of done? Tracking of the flow Built-in quality: link technical standards to work items Emergent design vs Intentional architecture: project specific design vs long-term strategy Routines for planning: regular personal review and team review, backlog refinement, iteration review, iteration retrospective CI &amp; CD# Branching and merging policies Tepository management Dev/Test/Prod environment and pipeline setup Ways of deployments Build and release automation: including all mandatory test/scan/approval/technical requirements steps Testing strategy &amp; quality assurance# Testing strategy and mapping with CI/CD Success criteria and target setting Automation tools for all types of tests Code scan: for quality, security including dependencies Manual test and feedback Bug tracking Logging &amp; monitoring# Logging requirements and enables Consolidation of logs, alerts, reports Monitoring tools Tracking of security events, errors, performance issues Application security# Security automation Security hardening and monitoring at platform layer Secrets (key/token/privileged credentials) protection API and web services security configuration and monitoring Vulnerability identification and patching process Data loss prevention Risk management# Pilot from risk perspective Knowledge base and training Dependencies on people and procurement processes Architecture and security review Business continuity# High availability Disaster recovery Technology Pillar# Automation capability (both biz and IT processes)# Automation platform Continuity of automation platform Control design in automation Identity and access management Development lifecycle Logging and monitoring License compliance Resilience of technologies# Risk level (from legal, security, compliance standpoints) Availability of the 3rd party services Development/update lifecycle Details of benchmarking metrics# The following weights of metrics and maturity values are defined based on my personal perspective from work experience, i.e. very subjective. Anyone who likes to adopt these metrics, should take the risk appetite of the organization into account and adjust them. Productivity# Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Deployment frequency Number of deployments to production Past 6 months 5% &lt;=1 or &gt;24 &lt;=6 &lt;=24 Change volume Average number of user stories deployed in one sprint divided by working days of a sprint Past 6 months 10% &lt; 0.2 or &gt; 1 &gt;= 0.2 and &lt;= 0.3 &gt; 0.3 and &lt;= 1 Mean change lead time Mean time between a code commit and production deployment of that code Past 6 months 15% &gt; 1 month &gt;= 2 weeks &lt; 2 weeks Mean Time to realize value Mean time between a feature request and realization of business value from that feature Last 3 releases 10% &gt; 1.5 years &gt; 9 months &lt;= 9 months Mean time to operate Mean time between the beginning of Sprint 0 to achieving authority to operate Last 3 releases 20% &gt; 1 month &gt;= 2 weeks &lt; 2 weeks Test automation percentage Percentage of test cases automated. All active features 15% &lt; 50% &lt; 80% &gt;= 80% Developer onboarding mean time Time from a developer joining the team to ability to commit code for production deployment Past 1 year 15% &lt; 2 weeks or &gt;= 2 months &gt;= 1 month and &lt; 2 months &gt;= 2 weeks and &lt; 1 month Mean time from sourcing to contract Mean time from the beginning of sourcing process to contract sign-off Past 1 year 10% &gt; 3 months &gt; 1 month &lt;= 1 month Risk management capability# Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Mean time to recovery Time between a failed production deployment to full restoration of production operations All active features 15% &gt; 1 day &gt; 1 hour &lt;= 1 hour Mean recovery point Mean time range of data that is lost due to an incident All active features 15% &gt; 1 day &gt; 1 hour &lt;= 1 hour Bug volume Average number of bugs reported after a release Last 3 releases 5% &gt;= 50 &gt; =10 and &lt; 50 &lt; 10 Bug Resolution time Mean time to resolve a bug Past 6 months 10% &gt; 3 days &gt; 1 day and &lt; 3 days &lt;= 1 day Mean time to patch vulnerability Mean time between identification of a vulnerability in the platform or application and successful production deployment of a patch Past 6 months 10% &gt; 3 weeks &gt; 1 week &lt;= 1 week Logging availability Percentage of systems that are logging. Platform &amp; application 10% &lt; 50% &lt; 80% 100% Monitoring availability Mean time from event generation to being available to support team Past 6 months 5% &gt; 1 hour &gt; 10 mins &lt;= 10 mins Deployment review percentage Percentage of deployments being reviewed from architecture or security Past 1 year 10% &lt; 50% &lt; 80% 100% Secure secret percentage Percentage of app secrets are securely created &amp; accessed without any human interactions. All active features 10% &lt; 50% &lt; 80% 100% Privilege auditing frequency Number of times that users and their privileges are audited Past 1 year 10% &lt;= 2 &gt; 2 and &lt;=12 &gt; 12 Usability# Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Completion rate of user tasks Percentage of user tasks completed successfully versus total tasks All active features 35% &lt; 50% &lt; 80% 100% Mean time to complete user tasks Mean time for users to complete tasks All active features 35% &gt;10 mins &gt;1min and &lt;= 10 mins &lt;= 1 min Test level satisfaction Average level of overall impression of user experience (on a 5-point scale) Last 3 releases 30% &lt; 2 &lt; 4 &gt;= 4 Reliability# Metrics Description Scope Weight in category Low maturity value Medium maturity value High maturity value Availability Amount of uptime in accordance with the SLA In a year 25% &lt;= 99% &lt; 99.99% &gt;= 99.99% Test coverage Percentage of code or feature that is covered by unit, integration, functional and security tests All active features 25% &lt; 50% &lt; 80% 100% Security benchmark deviation Deviation between security benchmarks applied and the baseline Platform &amp; application 25% &gt; 50% &lt;= 50% and &gt; 0% 0% #of MICS control deficiencies Number of key control deficiencies in MICS assessment report Latest report within the quarter 10% &gt;= 3 or no report &gt; 0 and &lt; 3 0 #of monitoring alerts Amount of monitoring alerts triggered Past 6 months 15% thousands hundreds tens]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>review framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cloud security]]></title>
    <url>%2F2019%2F01%2F11%2FCloud-security%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Privacy controls]]></title>
    <url>%2F2019%2F01%2F11%2FPrivacy-controls%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github建个人博客]]></title>
    <url>%2F2019%2F01%2F05%2Fhexo-github%2F</url>
    <content type="text"><![CDATA[注册一个Github账号，新建一个repository# 命名方式&lt;Github用户名&gt;.github.io，比如我的库叫做yangxfang.github.io。操作完毕后将这个名字输入浏览器地址栏就可以访问个人博客网站啦。 至于repository的设置，这是个Public库 😃 ​ 在Settings里找到Github Pages，这里可以选择一个主题。这里就可以知道在Github里搭建个人博客依赖的技术就是Github Pages啦。 ​ 本地安装Hexo，发布到Github# 安装依赖组件：Git、Node.js；Windows、Mac或Linux版本均有。 Mac上的命令如下 123sudo brew install gitsudo brew install nodejssudo brew install npm Node.js的安装也可以是： 1curl https://raw.github.com/creationix/nvm/master/install.sh | sh 安装Hexo 1npm install -g hexo-cli cd 你的个人博客源文件目录，也可以不用特别指定目录 1234hexo init myblog #自定义名字cd myblog #进入这个myblog目录npm install #配置nodehexo g &amp;&amp; hexo s #这会创建基础网页，启动Hexo服务，根据提示拷贝http://localhost:4000/进入浏览器查看，按ctrl+C停止服务 安装网站主题，Hexo网站上有非常多主题可选，我选了NexT（详细介绍见https://theme-next.org） 1git clone https://github.com/theme-next/hexo-theme-next themes/next #安装完成后可以在Themes目录下看到next目录 配置hexo，编辑_config.yml 1vi _config.yml #我用VIM编辑，当然你也可以用其他工具编辑 网站基本信息： 网站主题配置为next，部署方式为git，部署地址为github库的完整url，所属的库branch为master 当然你可以部署到其他branch，那就要去库的设置里把Pages的branch修改一下 配置主题，编辑themes/next/目录下的_config.yml NexT的扩展性很好，有很多插件可以启用，它的中英文网站有具体的说明，下方稍微列举下我配置的。 网页上可见的目录，默认只有home、archives，如需要就去掉#。 主题设置，默认Muse，我的是Gemini 启用回到顶部b2t，显示下滑条百分比scrollpercent 注意此选项仅对Pisces和Gemini主题有效 评论功能 😄，这里我使用了Valine 要用这个功能需要注册Leancloud（免费版即可），新建一个myblog的应用，在应用配置里找到appid和appkey，填在下方 同时还可以利用Leancloud来统计每篇文章的访客数量，可以使用相同的appid和appkey 还没完，在hexo的主_config.yml也需要配置 安装有关组件并注册： 12npm install hexo-leancloud-counter-security --savehexo lc-counter r 用户名 密码 启用分享到其他社交网站的功能 注意 很多功能是需要安装依赖包的，具体都会描述在Dependencies里，这就需要回到Hexo myblog目录来安装这些包，例如： 1git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton 搜索功能 主页不显示全文，仅预览 配置文件那么长，自己多多发掘好用的功能吧 😃 终于要发布到Github了，让Github和本机相互信任一下 😃 生成SSH 123git config --global user.name "yourname" #用的是Github的用户名git config --global user.email "youremail" #用的是注册Github的邮箱地址ssh-keygen -t rsa -C "youremail" 在执行目录下找到公钥pub和私钥 回到Github的个人设置页面，创建一个新的SSH and GPG keys，将公钥内容完整复制到key里，完成后就长这样吧 部署Hexo 12npm install hexo-deployer-git --save #安装组件hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 部署完毕后，就可以在Github的库里看到所有的文件，打开网址yangxfang.github.io 就👌啦 写博客# 新建博客 1hexo new post "标题" 新的md文件就会出现在source/_posts/目录下 编辑内容 md文件需要用Markdown编辑工具，我用的是Typora 在文章内插入图片，这真是折腾了我好一会。在_config.yml里找到配置post_asset_folder:改成true。修改之后，新建一个post时，hexo会自动建立一个同名的文件夹，在编辑md时把图片放在这个目录下即可。 在文章内插入目录， 首先安装组件 12npm i hexo-renderer-markdown-it --savenpm i hexo-renderer-markdown-it-plus --save 在_config.yml里添加如下内容 12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: pre_class: highlight 在文章内需要插入目录的位置输入@[TOC] 发布 1hexo g &amp;&amp; hexo d 如果觉得github.io网址不够酷# 那就自己买个域名，解析为Github的IP，在GitHub里设置自定义的域名，source目录下创建cname文件（无后缀），写进自定义的域名，最后，再发布一次Hexo到Github 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d **博客最最最重要的当然就是内容，我要不断学习Markdown编辑方式，把自己的学习和心得体会都记录下来 ^ ^ **]]></content>
      <tags>
        <tag>how to</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Starting my blog]]></title>
    <url>%2F2019%2F01%2F01%2FStarting-my-blog%2F</url>
    <content type="text"><![CDATA[2019年计划# 写个人博客 每天一杯咖啡 坚持义工写信 坚持每周跑步、健身 学会开车]]></content>
      <tags>
        <tag>Say Hi</tag>
      </tags>
  </entry>
</search>
